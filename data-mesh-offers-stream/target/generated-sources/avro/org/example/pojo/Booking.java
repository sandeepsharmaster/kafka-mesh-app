/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.pojo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Booking schema Version 1 */
@org.apache.avro.specific.AvroGenerated
public class Booking extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8706333693961181699L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Booking\",\"namespace\":\"org.example.pojo\",\"doc\":\"Booking schema Version 1\",\"fields\":[{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First Name of Visitor\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last Name of Visitor\"},{\"name\":\"booking_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Booking Id of the Visitor\"},{\"name\":\"payment_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"payment type of booking\"},{\"name\":\"booking_source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Booking source of the Visitor\"},{\"name\":\"booking_status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Booking Id of the Visitor\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Booking> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Booking> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Booking> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Booking> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Booking> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Booking to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Booking from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Booking instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Booking fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** First Name of Visitor */
  private java.lang.String first_name;
  /** Last Name of Visitor */
  private java.lang.String last_name;
  /** Booking Id of the Visitor */
  private java.lang.String booking_id;
  /** payment type of booking */
  private java.lang.String payment_type;
  /** Booking source of the Visitor */
  private java.lang.String booking_source;
  /** Booking Id of the Visitor */
  private java.lang.String booking_status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Booking() {}

  /**
   * All-args constructor.
   * @param first_name First Name of Visitor
   * @param last_name Last Name of Visitor
   * @param booking_id Booking Id of the Visitor
   * @param payment_type payment type of booking
   * @param booking_source Booking source of the Visitor
   * @param booking_status Booking Id of the Visitor
   */
  public Booking(java.lang.String first_name, java.lang.String last_name, java.lang.String booking_id, java.lang.String payment_type, java.lang.String booking_source, java.lang.String booking_status) {
    this.first_name = first_name;
    this.last_name = last_name;
    this.booking_id = booking_id;
    this.payment_type = payment_type;
    this.booking_source = booking_source;
    this.booking_status = booking_status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first_name;
    case 1: return last_name;
    case 2: return booking_id;
    case 3: return payment_type;
    case 4: return booking_source;
    case 5: return booking_status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first_name = value$ != null ? value$.toString() : null; break;
    case 1: last_name = value$ != null ? value$.toString() : null; break;
    case 2: booking_id = value$ != null ? value$.toString() : null; break;
    case 3: payment_type = value$ != null ? value$.toString() : null; break;
    case 4: booking_source = value$ != null ? value$.toString() : null; break;
    case 5: booking_status = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return First Name of Visitor
   */
  public java.lang.String getFirstName() {
    return first_name;
  }



  /**
   * Gets the value of the 'last_name' field.
   * @return Last Name of Visitor
   */
  public java.lang.String getLastName() {
    return last_name;
  }



  /**
   * Gets the value of the 'booking_id' field.
   * @return Booking Id of the Visitor
   */
  public java.lang.String getBookingId() {
    return booking_id;
  }



  /**
   * Gets the value of the 'payment_type' field.
   * @return payment type of booking
   */
  public java.lang.String getPaymentType() {
    return payment_type;
  }



  /**
   * Gets the value of the 'booking_source' field.
   * @return Booking source of the Visitor
   */
  public java.lang.String getBookingSource() {
    return booking_source;
  }



  /**
   * Gets the value of the 'booking_status' field.
   * @return Booking Id of the Visitor
   */
  public java.lang.String getBookingStatus() {
    return booking_status;
  }



  /**
   * Creates a new Booking RecordBuilder.
   * @return A new Booking RecordBuilder
   */
  public static org.example.pojo.Booking.Builder newBuilder() {
    return new org.example.pojo.Booking.Builder();
  }

  /**
   * Creates a new Booking RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Booking RecordBuilder
   */
  public static org.example.pojo.Booking.Builder newBuilder(org.example.pojo.Booking.Builder other) {
    if (other == null) {
      return new org.example.pojo.Booking.Builder();
    } else {
      return new org.example.pojo.Booking.Builder(other);
    }
  }

  /**
   * Creates a new Booking RecordBuilder by copying an existing Booking instance.
   * @param other The existing instance to copy.
   * @return A new Booking RecordBuilder
   */
  public static org.example.pojo.Booking.Builder newBuilder(org.example.pojo.Booking other) {
    if (other == null) {
      return new org.example.pojo.Booking.Builder();
    } else {
      return new org.example.pojo.Booking.Builder(other);
    }
  }

  /**
   * RecordBuilder for Booking instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Booking>
    implements org.apache.avro.data.RecordBuilder<Booking> {

    /** First Name of Visitor */
    private java.lang.String first_name;
    /** Last Name of Visitor */
    private java.lang.String last_name;
    /** Booking Id of the Visitor */
    private java.lang.String booking_id;
    /** payment type of booking */
    private java.lang.String payment_type;
    /** Booking source of the Visitor */
    private java.lang.String booking_source;
    /** Booking Id of the Visitor */
    private java.lang.String booking_status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.pojo.Booking.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.booking_id)) {
        this.booking_id = data().deepCopy(fields()[2].schema(), other.booking_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[3].schema(), other.payment_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.booking_source)) {
        this.booking_source = data().deepCopy(fields()[4].schema(), other.booking_source);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.booking_status)) {
        this.booking_status = data().deepCopy(fields()[5].schema(), other.booking_status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Booking instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.pojo.Booking other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.booking_id)) {
        this.booking_id = data().deepCopy(fields()[2].schema(), other.booking_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[3].schema(), other.payment_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.booking_source)) {
        this.booking_source = data().deepCopy(fields()[4].schema(), other.booking_source);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.booking_status)) {
        this.booking_status = data().deepCopy(fields()[5].schema(), other.booking_status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'first_name' field.
      * First Name of Visitor
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return first_name;
    }


    /**
      * Sets the value of the 'first_name' field.
      * First Name of Visitor
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.first_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * First Name of Visitor
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first_name' field.
      * First Name of Visitor
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * Last Name of Visitor
      * @return The value.
      */
    public java.lang.String getLastName() {
      return last_name;
    }


    /**
      * Sets the value of the 'last_name' field.
      * Last Name of Visitor
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setLastName(java.lang.String value) {
      validate(fields()[1], value);
      this.last_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * Last Name of Visitor
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'last_name' field.
      * Last Name of Visitor
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @return The value.
      */
    public java.lang.String getBookingId() {
      return booking_id;
    }


    /**
      * Sets the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @param value The value of 'booking_id'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setBookingId(java.lang.String value) {
      validate(fields()[2], value);
      this.booking_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_id' field has been set.
      * Booking Id of the Visitor
      * @return True if the 'booking_id' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearBookingId() {
      booking_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_type' field.
      * payment type of booking
      * @return The value.
      */
    public java.lang.String getPaymentType() {
      return payment_type;
    }


    /**
      * Sets the value of the 'payment_type' field.
      * payment type of booking
      * @param value The value of 'payment_type'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setPaymentType(java.lang.String value) {
      validate(fields()[3], value);
      this.payment_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_type' field has been set.
      * payment type of booking
      * @return True if the 'payment_type' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payment_type' field.
      * payment type of booking
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearPaymentType() {
      payment_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @return The value.
      */
    public java.lang.String getBookingSource() {
      return booking_source;
    }


    /**
      * Sets the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @param value The value of 'booking_source'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setBookingSource(java.lang.String value) {
      validate(fields()[4], value);
      this.booking_source = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_source' field has been set.
      * Booking source of the Visitor
      * @return True if the 'booking_source' field has been set, false otherwise.
      */
    public boolean hasBookingSource() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearBookingSource() {
      booking_source = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_status' field.
      * Booking Id of the Visitor
      * @return The value.
      */
    public java.lang.String getBookingStatus() {
      return booking_status;
    }


    /**
      * Sets the value of the 'booking_status' field.
      * Booking Id of the Visitor
      * @param value The value of 'booking_status'.
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder setBookingStatus(java.lang.String value) {
      validate(fields()[5], value);
      this.booking_status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_status' field has been set.
      * Booking Id of the Visitor
      * @return True if the 'booking_status' field has been set, false otherwise.
      */
    public boolean hasBookingStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'booking_status' field.
      * Booking Id of the Visitor
      * @return This builder.
      */
    public org.example.pojo.Booking.Builder clearBookingStatus() {
      booking_status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Booking build() {
      try {
        Booking record = new Booking();
        record.first_name = fieldSetFlags()[0] ? this.first_name : (java.lang.String) defaultValue(fields()[0]);
        record.last_name = fieldSetFlags()[1] ? this.last_name : (java.lang.String) defaultValue(fields()[1]);
        record.booking_id = fieldSetFlags()[2] ? this.booking_id : (java.lang.String) defaultValue(fields()[2]);
        record.payment_type = fieldSetFlags()[3] ? this.payment_type : (java.lang.String) defaultValue(fields()[3]);
        record.booking_source = fieldSetFlags()[4] ? this.booking_source : (java.lang.String) defaultValue(fields()[4]);
        record.booking_status = fieldSetFlags()[5] ? this.booking_status : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Booking>
    WRITER$ = (org.apache.avro.io.DatumWriter<Booking>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Booking>
    READER$ = (org.apache.avro.io.DatumReader<Booking>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.first_name);

    out.writeString(this.last_name);

    out.writeString(this.booking_id);

    out.writeString(this.payment_type);

    out.writeString(this.booking_source);

    out.writeString(this.booking_status);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.first_name = in.readString();

      this.last_name = in.readString();

      this.booking_id = in.readString();

      this.payment_type = in.readString();

      this.booking_source = in.readString();

      this.booking_status = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.first_name = in.readString();
          break;

        case 1:
          this.last_name = in.readString();
          break;

        case 2:
          this.booking_id = in.readString();
          break;

        case 3:
          this.payment_type = in.readString();
          break;

        case 4:
          this.booking_source = in.readString();
          break;

        case 5:
          this.booking_status = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










