/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.pojo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Offers schema Version 1 */
@org.apache.avro.specific.AvroGenerated
public class Offers extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6529724057449289799L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Offers\",\"namespace\":\"org.example.pojo\",\"doc\":\"Offers schema Version 1\",\"fields\":[{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First Name of Visitor\"},{\"name\":\"booking_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Booking Id of the Visitor\"},{\"name\":\"payment_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"payment type of booking\"},{\"name\":\"booking_source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Booking source of the Visitor\"},{\"name\":\"cash_back\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Cashback for the Visitor\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Offers> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Offers> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Offers> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Offers> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Offers> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Offers to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Offers from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Offers instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Offers fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** First Name of Visitor */
  private java.lang.String first_name;
  /** Booking Id of the Visitor */
  private java.lang.String booking_id;
  /** payment type of booking */
  private java.lang.String payment_type;
  /** Booking source of the Visitor */
  private java.lang.String booking_source;
  /** Cashback for the Visitor */
  private java.lang.String cash_back;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Offers() {}

  /**
   * All-args constructor.
   * @param first_name First Name of Visitor
   * @param booking_id Booking Id of the Visitor
   * @param payment_type payment type of booking
   * @param booking_source Booking source of the Visitor
   * @param cash_back Cashback for the Visitor
   */
  public Offers(java.lang.String first_name, java.lang.String booking_id, java.lang.String payment_type, java.lang.String booking_source, java.lang.String cash_back) {
    this.first_name = first_name;
    this.booking_id = booking_id;
    this.payment_type = payment_type;
    this.booking_source = booking_source;
    this.cash_back = cash_back;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first_name;
    case 1: return booking_id;
    case 2: return payment_type;
    case 3: return booking_source;
    case 4: return cash_back;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first_name = value$ != null ? value$.toString() : null; break;
    case 1: booking_id = value$ != null ? value$.toString() : null; break;
    case 2: payment_type = value$ != null ? value$.toString() : null; break;
    case 3: booking_source = value$ != null ? value$.toString() : null; break;
    case 4: cash_back = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return First Name of Visitor
   */
  public java.lang.String getFirstName() {
    return first_name;
  }



  /**
   * Gets the value of the 'booking_id' field.
   * @return Booking Id of the Visitor
   */
  public java.lang.String getBookingId() {
    return booking_id;
  }



  /**
   * Gets the value of the 'payment_type' field.
   * @return payment type of booking
   */
  public java.lang.String getPaymentType() {
    return payment_type;
  }



  /**
   * Gets the value of the 'booking_source' field.
   * @return Booking source of the Visitor
   */
  public java.lang.String getBookingSource() {
    return booking_source;
  }



  /**
   * Gets the value of the 'cash_back' field.
   * @return Cashback for the Visitor
   */
  public java.lang.String getCashBack() {
    return cash_back;
  }



  /**
   * Creates a new Offers RecordBuilder.
   * @return A new Offers RecordBuilder
   */
  public static org.example.pojo.Offers.Builder newBuilder() {
    return new org.example.pojo.Offers.Builder();
  }

  /**
   * Creates a new Offers RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Offers RecordBuilder
   */
  public static org.example.pojo.Offers.Builder newBuilder(org.example.pojo.Offers.Builder other) {
    if (other == null) {
      return new org.example.pojo.Offers.Builder();
    } else {
      return new org.example.pojo.Offers.Builder(other);
    }
  }

  /**
   * Creates a new Offers RecordBuilder by copying an existing Offers instance.
   * @param other The existing instance to copy.
   * @return A new Offers RecordBuilder
   */
  public static org.example.pojo.Offers.Builder newBuilder(org.example.pojo.Offers other) {
    if (other == null) {
      return new org.example.pojo.Offers.Builder();
    } else {
      return new org.example.pojo.Offers.Builder(other);
    }
  }

  /**
   * RecordBuilder for Offers instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Offers>
    implements org.apache.avro.data.RecordBuilder<Offers> {

    /** First Name of Visitor */
    private java.lang.String first_name;
    /** Booking Id of the Visitor */
    private java.lang.String booking_id;
    /** payment type of booking */
    private java.lang.String payment_type;
    /** Booking source of the Visitor */
    private java.lang.String booking_source;
    /** Cashback for the Visitor */
    private java.lang.String cash_back;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.pojo.Offers.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.booking_id)) {
        this.booking_id = data().deepCopy(fields()[1].schema(), other.booking_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[2].schema(), other.payment_type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.booking_source)) {
        this.booking_source = data().deepCopy(fields()[3].schema(), other.booking_source);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.cash_back)) {
        this.cash_back = data().deepCopy(fields()[4].schema(), other.cash_back);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Offers instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.pojo.Offers other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booking_id)) {
        this.booking_id = data().deepCopy(fields()[1].schema(), other.booking_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[2].schema(), other.payment_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.booking_source)) {
        this.booking_source = data().deepCopy(fields()[3].schema(), other.booking_source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cash_back)) {
        this.cash_back = data().deepCopy(fields()[4].schema(), other.cash_back);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'first_name' field.
      * First Name of Visitor
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return first_name;
    }


    /**
      * Sets the value of the 'first_name' field.
      * First Name of Visitor
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.first_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * First Name of Visitor
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first_name' field.
      * First Name of Visitor
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @return The value.
      */
    public java.lang.String getBookingId() {
      return booking_id;
    }


    /**
      * Sets the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @param value The value of 'booking_id'.
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder setBookingId(java.lang.String value) {
      validate(fields()[1], value);
      this.booking_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_id' field has been set.
      * Booking Id of the Visitor
      * @return True if the 'booking_id' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'booking_id' field.
      * Booking Id of the Visitor
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder clearBookingId() {
      booking_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_type' field.
      * payment type of booking
      * @return The value.
      */
    public java.lang.String getPaymentType() {
      return payment_type;
    }


    /**
      * Sets the value of the 'payment_type' field.
      * payment type of booking
      * @param value The value of 'payment_type'.
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder setPaymentType(java.lang.String value) {
      validate(fields()[2], value);
      this.payment_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_type' field has been set.
      * payment type of booking
      * @return True if the 'payment_type' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'payment_type' field.
      * payment type of booking
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder clearPaymentType() {
      payment_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @return The value.
      */
    public java.lang.String getBookingSource() {
      return booking_source;
    }


    /**
      * Sets the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @param value The value of 'booking_source'.
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder setBookingSource(java.lang.String value) {
      validate(fields()[3], value);
      this.booking_source = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_source' field has been set.
      * Booking source of the Visitor
      * @return True if the 'booking_source' field has been set, false otherwise.
      */
    public boolean hasBookingSource() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'booking_source' field.
      * Booking source of the Visitor
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder clearBookingSource() {
      booking_source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cash_back' field.
      * Cashback for the Visitor
      * @return The value.
      */
    public java.lang.String getCashBack() {
      return cash_back;
    }


    /**
      * Sets the value of the 'cash_back' field.
      * Cashback for the Visitor
      * @param value The value of 'cash_back'.
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder setCashBack(java.lang.String value) {
      validate(fields()[4], value);
      this.cash_back = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cash_back' field has been set.
      * Cashback for the Visitor
      * @return True if the 'cash_back' field has been set, false otherwise.
      */
    public boolean hasCashBack() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cash_back' field.
      * Cashback for the Visitor
      * @return This builder.
      */
    public org.example.pojo.Offers.Builder clearCashBack() {
      cash_back = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Offers build() {
      try {
        Offers record = new Offers();
        record.first_name = fieldSetFlags()[0] ? this.first_name : (java.lang.String) defaultValue(fields()[0]);
        record.booking_id = fieldSetFlags()[1] ? this.booking_id : (java.lang.String) defaultValue(fields()[1]);
        record.payment_type = fieldSetFlags()[2] ? this.payment_type : (java.lang.String) defaultValue(fields()[2]);
        record.booking_source = fieldSetFlags()[3] ? this.booking_source : (java.lang.String) defaultValue(fields()[3]);
        record.cash_back = fieldSetFlags()[4] ? this.cash_back : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Offers>
    WRITER$ = (org.apache.avro.io.DatumWriter<Offers>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Offers>
    READER$ = (org.apache.avro.io.DatumReader<Offers>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.first_name);

    out.writeString(this.booking_id);

    out.writeString(this.payment_type);

    out.writeString(this.booking_source);

    out.writeString(this.cash_back);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.first_name = in.readString();

      this.booking_id = in.readString();

      this.payment_type = in.readString();

      this.booking_source = in.readString();

      this.cash_back = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.first_name = in.readString();
          break;

        case 1:
          this.booking_id = in.readString();
          break;

        case 2:
          this.payment_type = in.readString();
          break;

        case 3:
          this.booking_source = in.readString();
          break;

        case 4:
          this.cash_back = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










